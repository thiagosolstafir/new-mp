/*---------------------------------
           NeutronCSS
---------------------------------*/

// Settings Management
// ============================================

$_neutron: (
        layout: (
                column-padding: 4px 8px,
                container-max-width: 960px,
                flush-margin: true,
                flush-padding: false
        ),
        query: (
                mobile-max: 479px,
                phablet-max: 767px,
                tablet-max: 1023px,
                desktop-sml-max: 1199px,
                desktop-mid-max: 1799px
        )
) !default;

@function setting($map_name: "", $setting: "") {
  @if $map_name != "" and $setting != "" {
    $map: map-get($_neutron, $map_name);
    @return map-get($map, $setting);
  }
}

// Helper Functions
// ============================================

//Adds all items in a list and returns the result
@function neutron_sum($list) {

  $total: 0;
  @each $element in $list {
    $total: $total + $element;
  }
  @return $total;

}

@function neutron_extract-position($shorthand, $position) {
  $shorthand-length: length($shorthand);

  //if only one variable passed, return it
  @if $shorthand-length == 1 {
    @return $shorthand;
  }

  @if $shorthand-length == 2 {
    @if $position == top or $position == bottom {
      @return nth($shorthand, 1);
    }

    @if $position == left or $position == right {
      @return nth($shorthand, 2);
    }
  }

  @if $shorthand-length == 3 {
    @if $position == top {
      @return nth($shorthand, 1);
    }

    @if $position == left or $position == right {
      @return nth($shorthand, 2);
    }

    @if $position == bottom {
      @return nth($shorthand, 3);
    }
  }

  @if $shorthand-length == 4 {
    @if $position == top {
      @return nth($shorthand, 1);
    }

    @if $position == right {
      @return nth($shorthand, 2);
    }

    @if $position == bottom {
      @return nth($shorthand, 3);
    }

    @if $position == left {
      @return nth($shorthand, 4);
    }
  }
}

// UTILITY FUNCTIONS
@function neutron_reorder-list($list, $order) {

  $new-list: ();

  @each $index in $order {
    $item: nth($list, $index);
    $new-list: append($new-list, $item, comma);
  }

  @return $new-list;
}

@function neutron_calculate-column-widths($column-ratio) {

  $column-sum: neutron_sum($column-ratio);
  $column-count: length($column-ratio);
  $column-widths: ();

  //Determine width of each column
  @each $column in $column-ratio {
    $width: (100% / $column-sum) * $column;
    $column-widths: append($column-widths, $width, comma);
  }

  @return $column-widths;
}

@function neutron_calc-column-ratio($columns) {
  $column-ratio: $columns;

  @if type-of($columns) != list {
    $column-ratio: ();

    @for $i from 1 through $columns {
      $column-ratio: append($column-ratio, 1, comma);
    }
  }

  @return $column-ratio;
}

@function neutron_child-selector($target-selector) {
  $child-selector: "nth-of-type";

  @if $target-selector == "*" {
    $child-selector: "nth-child";
  }

  @return $child-selector;
}

// Exemplo
/*
section {
  @include columns((4), $margin: 5px, $container-width: 100%);

  @include breakpoint(mobile) {
    @include columns(1);
  }

  a {
    height: auto;
    float: left;
    background: #000;

    img {
      @include mp-imgresponsive;
    }
  }
}
*/